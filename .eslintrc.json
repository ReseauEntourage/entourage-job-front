{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.json",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "react-hooks",
    "prettier",
    "@typescript-eslint/eslint-plugin",
    "@typescript-eslint",
    "typescript-sort-keys",
    "import",
    "@jambit/typed-redux-saga"
  ],
  "extends": [
    "airbnb",
    "prettier",
    "eslint:recommended",
    "plugin:import/recommended",
    "plugin:@next/next/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended" // should always be the last element in the array
  ],
  "env": {
    "browser": true,
    "commonjs": true,
    "mocha": true,
    "node": true,
    "jest": true,
    "es6": true
  },
  "rules": {
    // Plain JavaScript Rules
    "arrow-body-style": 0,
    // Note: you must disable the base rule as it can report incorrect errors
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "error",
    //
    "no-console": [1, { "allow": ["warn", "error"] }],
    "no-multiple-empty-lines": [2, { "max": 1 }], // prettier like
    // max-len is enought
    "object-curly-newline": 0,
    // disable due to TypeScript params. More infos here: https://kendaleiv.com/typescript-constructor-assignment-public-and-private-keywords
    "no-useless-constructor": 0,
    "class-methods-use-this": 0,
    "max-classes-per-file": 0,
    "camelcase": "off",
    "curly": "warn",
    "strict": ["error", "global"],
    "prefer-promise-reject-errors": "off",
    "no-return-assign": "off",
    "no-case-declarations": "off",
    "no-param-reassign": "off",
    "consistent-return": "off",
    "no-underscore-dangle": "off",
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/anchor-has-content": "off",
    "jsx-a11y/click-events-have-key-events": "off",
    "jsx-a11y/no-static-element-interactions": "off",
    "jsx-a11y/no-noninteractive-element-interactions": "off",
    "jsx-a11y/control-has-associated-label": "off",
    "react/jsx-one-expression-per-line": "off",
    "react/no-array-index-key": "off",
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "react/prop-types": "error",
    "react/style-prop-object": "off",
    "react/forbid-prop-types": "warn",
    "react/jsx-props-no-spreading": "off",
    "react/jsx-wrap-multilines": "off",

    // with TypeScript, no default props
    "react/require-default-props": 0,
    "react/static-property-placement": ["warn", "static getter"],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",
    "jsx-a11y/aria-role": [
      2,
      {
        "allowedInvalidRoles": ["Candidat"],
        "ignoreNonDOM": true
      }
    ],
    "react/jsx-filename-extension": [
      "warn",
      {
        "extensions": [".js", ".jsx", ".tsx"]
      }
    ],
    "prettier/prettier": [
      "error",
      {},
      {
        "usePrettierrc": true
      }
    ],

    // TypeScript Rules
    "@typescript-eslint/no-unused-vars": [1, { "ignoreRestSiblings": true }],
    "@typescript-eslint/member-delimiter-style": [
      1,
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    "@typescript-eslint/no-empty-interface": 0,
    // TODO remove when all TS
    "@typescript-eslint/no-empty-function": 0,
    // many times, typing will bring duplication
    "@typescript-eslint/explicit-function-return-type": 0,
    "@typescript-eslint/ban-ts-ignore": 0,
    "@typescript-eslint/interface-name-prefix": 0,

    // Import Rules
    // TODO put ts: never and tsx: never when all files have been transformed
    "import/extensions": [
      2,
      "ignorePackages",
      { "ts": "never", "tsx": "never", "js": "never", "jsx": "never" }
    ],
    "import/prefer-default-export": 0,
    "import/no-default-export": 2,
    "import/no-named-as-default": 2,
    // allow to use devDeps in test files.
    // See options: https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-extraneous-dependencies.md#options
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "tests/**/*",
          "**/__tests__/**",
          "**/__mocks__/**",
          "**/*{.,_}{test,spec}.{js,jsx,ts,tsx}"
        ]
      }
    ],
    // 'sort-imports': 2,
    "import/order": [
      1,
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "alphabetize": {
          "order": "asc"
        },
        "pathGroups": [
          {
            "pattern": "src/**",
            "group": "parent"
          },
          {
            "pattern": "tests/**",
            "group": "parent"
          }
        ]
      }
    ]
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "project": "./tsconfig.json"
      },
      "node": {
        "paths": ["."]
      }
    }
  },
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "root": true,
  "overrides": [
    {
      // storybook use both default export and named exports
      "files": ["src/**/*.stories.tsx"],
      "rules": {
        "import/no-default-export": 0
      }
    },
    {
      "files": ["src/pages/**"],
      "rules": {
        "import/no-default-export": 0,
        "import/prefer-default-export": 2
      }
    },
    {
      "files": ["./**/*.ts"],
      "excludedFiles": ["./**/*.spec.ts"],
      "rules": {
        "@jambit/typed-redux-saga/use-typed-effects": "error",
        "@jambit/typed-redux-saga/delegate-effects": "error"
      }
    }
  ]
}
